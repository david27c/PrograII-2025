Index: app/src/main/java/com/example/miprimeraaplicacion/lista_bebidas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.miprimeraaplicacion;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.ContextMenu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ListView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\npublic class lista_bebidas extends AppCompatActivity {\r\n    Bundle parametros = new Bundle();\r\n    ListView ltsBebidas;\r\n    Cursor cBebidas;\r\n    DB db;\r\n    public final ArrayList<Bebidas> alBebidas = new ArrayList<>();\r\n    final ArrayList<Bebidas> alBebidasCopia = new ArrayList<>();\r\n    JSONArray jsonArray;\r\n    JSONObject jsonObject;\r\n    Bebidas misBebidas;\r\n    FloatingActionButton fab;\r\n    obtenerDatosServidor datosServidor;\r\n    detectarInternet di;\r\n    int posicion = 0;\r\n    EditText txtBuscarBebidas;\r\n\r\n    // Elementos de la interfaz para crear/editar\r\n    EditText etCodigoCrearEditar;\r\n    EditText etDescripcionCrearEditar;\r\n    EditText etMarcaCrearEditar;\r\n    EditText etPresentacionCrearEditar;\r\n    EditText etPrecioCrearEditar;\r\n    Button btnAbrirGaleriaCrearEditar;\r\n    LinearLayout layoutFotosSeleccionadasCrearEditar;\r\n    Button btnGuardarCrearEditar;\r\n    ArrayList<String> selectedImagePaths = new ArrayList<>();\r\n    private static final int REQUEST_READ_EXTERNAL_STORAGE = 102;\r\n    private String bebidaIdEditando = null;\r\n\r\n    private ActivityResultLauncher<Intent> imagePickerLauncher;\r\n\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_lista_bebidas);\r\n\r\n        parametros.putString(\"accion\", \"nuevo\");\r\n        db = new DB(this);\r\n\r\n        fab = findViewById(R.id.fabAgregarBebida);\r\n        fab.setOnClickListener(view -> mostrarFormularioCrear());\r\n\r\n        ltsBebidas = findViewById(R.id.ltsBebidas);\r\n        txtBuscarBebidas = findViewById(R.id.txtBuscarBebidas);\r\n\r\n        etCodigoCrearEditar = findViewById(R.id.etCodigoCrearEditar);\r\n        etDescripcionCrearEditar = findViewById(R.id.etDescripcionCrearEditar);\r\n        etMarcaCrearEditar = findViewById(R.id.etMarcaCrearEditar);\r\n        etPresentacionCrearEditar = findViewById(R.id.etPresentacionCrearEditar);\r\n        etPrecioCrearEditar = findViewById(R.id.etPrecioCrearEditar);\r\n        btnAbrirGaleriaCrearEditar = findViewById(R.id.btnAbrirGaleriaCrearEditar);\r\n        layoutFotosSeleccionadasCrearEditar = findViewById(R.id.layoutFotosSeleccionadasCrearEditar);\r\n        btnGuardarCrearEditar = findViewById(R.id.btnGuardarCrearEditar);\r\n\r\n        imagePickerLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(),\r\n                new androidx.activity.result.ActivityResultCallback<androidx.activity.result.ActivityResult>() {\r\n                    @Override\r\n                    public void onActivityResult(androidx.activity.result.ActivityResult result) {\r\n                        if (result.getResultCode() == Activity.RESULT_OK) {\r\n                            Intent data = result.getData();\r\n                            if (data != null) {\r\n                                if (data.getClipData() != null) {\r\n                                    int clipDataCount = data.getClipData().getItemCount();\r\n                                    for (int i = 0; i < clipDataCount; i++) {\r\n                                        Uri imageUri = data.getClipData().getItemAt(i).getUri();\r\n                                        String path = getPathFromUri(imageUri);\r\n                                        if (path != null) {\r\n                                            selectedImagePaths.add(path);\r\n                                            Log.d(\"Galeria\", \"Foto seleccionada (ClipData): \" + path);\r\n                                            mostrarMiniaturasCrearEditar();\r\n                                        }\r\n                                    }\r\n                                } else if (data.getData() != null) {\r\n                                    Uri imageUri = data.getData();\r\n                                    String path = getPathFromUri(imageUri);\r\n                                    if (path != null) {\r\n                                        selectedImagePaths.add(path);\r\n                                        Log.d(\"Galeria\", \"Foto seleccionada (Single): \" + path);\r\n                                        mostrarMiniaturasCrearEditar();\r\n                                    }\r\n                                }\r\n                                mostrarMsg(\"Se seleccionaron \" + selectedImagePaths.size() + \" fotos.\");\r\n                            } else {\r\n                                mostrarMsg(\"No se seleccionó ninguna imagen.\");\r\n                            }\r\n                        } else if (result.getResultCode() == Activity.RESULT_CANCELED) {\r\n                            mostrarMsg(\"Selección de imagen cancelada.\");\r\n                        }\r\n                    }\r\n                });\r\n\r\n        if (btnAbrirGaleriaCrearEditar != null) {\r\n            btnAbrirGaleriaCrearEditar.setOnClickListener(v -> checkPermissionsAndOpenGallery());\r\n        }\r\n\r\n        if (btnGuardarCrearEditar != null) {\r\n            btnGuardarCrearEditar.setOnClickListener(v -> guardarBebida());\r\n        }\r\n\r\n        // Muevo la llamada a ocultarFormularioCrearEditar() al final del onCreate()\r\n        listarBebidas();\r\n        buscarBebida();\r\n        ocultarFormularioCrearEditar();\r\n    }\r\n\r\n    private void listarBebidas() {\r\n        try {\r\n            di = new detectarInternet(this);\r\n            if (di.hayConexionInternet()) { //online\r\n                datosServidor = new obtenerDatosServidor();\r\n                datosServidor.setCallback(new obtenerDatosServidor.Callback() {\r\n                    @Override\r\n                    public void onRespuestaRecibida(String respuesta) {\r\n                        try {\r\n                            jsonObject = new JSONObject(respuesta);\r\n                            jsonArray = jsonObject.getJSONArray(\"rows\");\r\n                            mostrarDatosBebida(true); // Indica que los datos son online\r\n                        } catch (Exception e) {\r\n                            mostrarMsg(\"Error al procesar datos del servidor: \" + e.getMessage());\r\n                            obtenerDatosBebidaLocal(); // Fallback a datos locales en caso de error de procesamiento\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFallo(String mensajeError) {\r\n                        mostrarMsg(\"Error al obtener datos del servidor: \" + mensajeError);\r\n                        obtenerDatosBebidaLocal(); // Fallback a datos locales en caso de fallo de la red\r\n                    }\r\n                });\r\n                datosServidor.execute();\r\n            } else { //offline\r\n                obtenerDatosBebidaLocal();\r\n                mostrarDatosBebida(false); // Indica que los datos son offline\r\n            }\r\n        } catch (Exception e) {\r\n            mostrarMsg(\"Error al listar bebidas: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {\r\n        super.onCreateContextMenu(menu, v, menuInfo);\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.mimenu, menu);\r\n        try {\r\n            AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) menuInfo;\r\n            posicion = info.position;\r\n            JSONObject bebidaValue;\r\n            if (di.hayConexionInternet() && jsonArray != null && jsonArray.length() > posicion) {\r\n                bebidaValue = jsonArray.getJSONObject(posicion).getJSONObject(\"value\");\r\n            } else if (!di.hayConexionInternet() && alBebidas.size() > posicion) {\r\n                bebidaValue = convertirBebidaAJSONObject(alBebidas.get(posicion));\r\n            } else {\r\n                return; // Evitar errores si la posición es inválida\r\n            }\r\n            menu.setHeaderTitle(bebidaValue.getString(\"codigo\"));\r\n        } catch (Exception e) {\r\n            mostrarMsg(\"Error en el menú contextual: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private JSONObject convertirBebidaAJSONObject(Bebidas bebida) {\r\n        JSONObject jsonObject = new JSONObject();\r\n        try {\r\n            jsonObject.put(\"idBebida\", bebida.getIdBebida());\r\n            jsonObject.put(\"codigo\", bebida.getCodigo());\r\n            jsonObject.put(\"descripcion\", bebida.getDescripcion());\r\n            jsonObject.put(\"marca\", bebida.getMarca());\r\n            jsonObject.put(\"presentacion\", bebida.getPresentacion());\r\n            jsonObject.put(\"precio\", bebida.getPrecio());\r\n            JSONArray fotosArray = new JSONArray(bebida.getFotos());\r\n            jsonObject.put(\"fotos\", fotosArray);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return jsonObject;\r\n    }\r\n\r\n    @Override\r\n    public boolean onContextItemSelected(@NonNull MenuItem item) {\r\n        try {\r\n            JSONObject bebidaValue = null;\r\n            if (di.hayConexionInternet() && jsonArray != null && jsonArray.length() > posicion) {\r\n                bebidaValue = jsonArray.getJSONObject(posicion).getJSONObject(\"value\");\r\n            } else if (!di.hayConexionInternet() && alBebidas.size() > posicion) {\r\n                bebidaValue = convertirBebidaAJSONObject(alBebidas.get(posicion));\r\n            } else {\r\n                return super.onContextItemSelected(item);\r\n            }\r\n\r\n            if (item.getItemId() == R.id.mnxNuevo) {\r\n                mostrarFormularioCrear();\r\n            } else if (item.getItemId() == R.id.mnxModificar) {\r\n                mostrarFormularioEditar(bebidaValue.toString());\r\n            } else if (item.getItemId() == R.id.mnxEliminar) {\r\n                eliminarBebida(bebidaValue.getString(\"idBebida\"), bebidaValue.optString(\"_id\"), bebidaValue.optString(\"_rev\"));\r\n            }\r\n            return true;\r\n        } catch (Exception e) {\r\n            mostrarMsg(\"Error al seleccionar item del menú: \" + e.getMessage());\r\n            return super.onContextItemSelected(item);\r\n        }\r\n    }\r\n\r\n    private void eliminarBebida(String idBebidaLocal, String _idServidor, String _revServidor) {\r\n        AlertDialog.Builder confirmacion = new AlertDialog.Builder(this);\r\n        confirmacion.setTitle(\"¿Seguro que desea eliminar?\");\r\n        confirmacion.setMessage(\"Código: \" + idBebidaLocal);\r\n        confirmacion.setPositiveButton(\"Sí\", (dialog, which) -> {\r\n            try {\r\n                if (di.hayConexionInternet() && _idServidor != null && !_idServidor.isEmpty()) { //online\r\n                    String url = utilidades.URL_MTO + \"/\" + _idServidor + \"?rev=\" + _revServidor;\r\n                    enviarDatosServidor objEnviarDatosServidor = new enviarDatosServidor(this);\r\n                    String respuesta = objEnviarDatosServidor.execute(new JSONObject().toString(), \"DELETE\", url).get();\r\n                    if (respuesta != null) {\r\n                        JSONObject respuestaJSON = new JSONObject(respuesta);\r\n                        if (respuestaJSON.getBoolean(\"ok\")) {\r\n                            listarBebidas();\r\n                            mostrarMsg(\"Bebida eliminada del servidor.\");\r\n                        } else {\r\n                            mostrarMsg(\"Error al eliminar del servidor: \" + respuesta);\r\n                        }\r\n                    } else {\r\n                        mostrarMsg(\"Error de conexión al eliminar del servidor.\");\r\n                    }\r\n                }\r\n                String respuestaLocal = db.administrar_bebidas(\"eliminar\", new String[]{idBebidaLocal});\r\n                if (respuestaLocal.equals(\"ok\")) {\r\n                    listarBebidas();\r\n                    mostrarMsg(\"Bebida eliminada localmente.\");\r\n                } else {\r\n                    mostrarMsg(\"Error al eliminar localmente: \" + respuestaLocal);\r\n                }\r\n            } catch (Exception e) {\r\n                mostrarMsg(\"Error al eliminar bebida: \" + e.getMessage());\r\n            }\r\n        });\r\n        confirmacion.setNegativeButton(\"No\", (dialog, which) -> dialog.dismiss());\r\n        confirmacion.create().show();\r\n    }\r\n\r\n    private void mostrarFormularioCrear() {\r\n        bebidaIdEditando = null;\r\n        limpiarFormularioCrearEditar();\r\n        mostrarElementosCrearEditar();\r\n    }\r\n\r\n    private void mostrarFormularioEditar(String bebidaJson) {\r\n        mostrarElementosCrearEditar();\r\n        try {\r\n            JSONObject bebida = new JSONObject(bebidaJson);\r\n            bebidaIdEditando = bebida.getString(\"idBebida\");\r\n            etCodigoCrearEditar.setText(bebida.getString(\"codigo\"));\r\n            etDescripcionCrearEditar.setText(bebida.getString(\"descripcion\"));\r\n            etMarcaCrearEditar.setText(bebida.getString(\"marca\"));\r\n            etPresentacionCrearEditar.setText(bebida.getString(\"presentacion\"));\r\n            etPrecioCrearEditar.setText(bebida.getString(\"precio\"));\r\n            selectedImagePaths.clear();\r\n            JSONArray fotosArray = bebida.optJSONArray(\"fotos\");\r\n            if (fotosArray != null) {\r\n                for (int i = 0; i < fotosArray.length(); i++) {\r\n                    selectedImagePaths.add(fotosArray.getString(i));\r\n                }\r\n                mostrarMiniaturasCrearEditar();\r\n            }\r\n        } catch (Exception e) {\r\n            mostrarMsg(\"Error al cargar datos para editar.\");\r\n        }\r\n    }\r\n\r\n    private void ocultarFormularioCrearEditar() {\r\n        if (etCodigoCrearEditar != null) etCodigoCrearEditar.setVisibility(View.GONE);\r\n        if (etDescripcionCrearEditar != null) etDescripcionCrearEditar.setVisibility(View.GONE);\r\n        if (etMarcaCrearEditar != null) etMarcaCrearEditar.setVisibility(View.GONE);\r\n        if (etPresentacionCrearEditar != null) etPresentacionCrearEditar.setVisibility(View.GONE);\r\n        if (etPrecioCrearEditar != null) etPrecioCrearEditar.setVisibility(View.GONE);\r\n        if (btnAbrirGaleriaCrearEditar != null) btnAbrirGaleriaCrearEditar.setVisibility(View.GONE);\r\n        if (layoutFotosSeleccionadasCrearEditar != null) layoutFotosSeleccionadasCrearEditar.setVisibility(View.GONE);\r\n        if (btnGuardarCrearEditar != null) btnGuardarCrearEditar.setVisibility(View.GONE);\r\n    }\r\n\r\n    private void mostrarElementosCrearEditar() {\r\n        if (etCodigoCrearEditar != null) etCodigoCrearEditar.setVisibility(View.VISIBLE);\r\n        if (etDescripcionCrearEditar != null) etDescripcionCrearEditar.setVisibility(View.VISIBLE);\r\n        if (etMarcaCrearEditar != null) etMarcaCrearEditar.setVisibility(View.VISIBLE);\r\n        if (etPresentacionCrearEditar != null) etPresentacionCrearEditar.setVisibility(View.VISIBLE);\r\n        if (etPrecioCrearEditar != null) etPrecioCrearEditar.setVisibility(View.VISIBLE);\r\n        if (btnAbrirGaleriaCrearEditar != null) btnAbrirGaleriaCrearEditar.setVisibility(View.VISIBLE);\r\n        if (layoutFotosSeleccionadasCrearEditar != null) layoutFotosSeleccionadasCrearEditar.setVisibility(View.VISIBLE);\r\n        if (btnGuardarCrearEditar != null) btnGuardarCrearEditar.setVisibility(View.VISIBLE);\r\n    }\r\n\r\n    private void limpiarFormularioCrearEditar() {\r\n        if (etCodigoCrearEditar != null) etCodigoCrearEditar.setText(\"\");\r\n        if (etDescripcionCrearEditar != null) etDescripcionCrearEditar.setText(\"\");\r\n        if (etMarcaCrearEditar != null) etMarcaCrearEditar.setText(\"\");\r\n        if (etPresentacionCrearEditar != null) etPresentacionCrearEditar.setText(\"\");\r\n        if (etPrecioCrearEditar != null) etPrecioCrearEditar.setText(\"\");\r\n        selectedImagePaths.clear();\r\n        mostrarMiniaturasCrearEditar();\r\n    }\r\n\r\n    private void guardarBebida() {\r\n        String codigo = (etCodigoCrearEditar != null) ? etCodigoCrearEditar.getText().toString().trim() : \"\";\r\n        String descripcion = (etDescripcionCrearEditar != null) ? etDescripcionCrearEditar.getText().toString().trim() : \"\";\r\n        String marca = (etMarcaCrearEditar != null) ? etMarcaCrearEditar.getText().toString().trim() : \"\";\r\n        String presentacion = presentacion();\r\n        String precio = precio();\r\n        String fotos = String.join(\";\", selectedImagePaths);\r\n\r\n        if (!codigo.isEmpty() && !descripcion.isEmpty() && !marca.isEmpty() && !presentacion().isEmpty() && !precio().isEmpty()) {\r\n            String respuesta;\r\n            if (bebidaIdEditando != null) {\r\n                // Modificar\r\n                String[] datos = {bebidaIdEditando, codigo, descripcion, marca, presentacion, precio, fotos};\r\n                respuesta = db.administrar_bebidas(\"modificar\", datos);\r\n                if (respuesta.equals(\"ok\")) {\r\n                    mostrarMsg(\"Bebida modificada.\");\r\n                } else {\r\n                    mostrarMsg(\"Error al modificar: \" + respuesta);\r\n                }\r\n            } else {\r\n                // Crear nuevo\r\n                String[] datos = {null, codigo, descripcion, marca, presentacion, precio, fotos};\r\n                respuesta = db.administrar_bebidas(\"nuevo\", datos);\r\n                if (respuesta.equals(\"ok\")) {\r\n                    mostrarMsg(\"Nueva bebida guardada.\");\r\n                } else {\r\n                    mostrarMsg(\"Error al guardar: \" + respuesta);\r\n                }\r\n            }\r\n            listarBebidas();\r\n            ocultarFormularioCrearEditar();\r\n        } else {\r\n            mostrarMsg(\"Por favor, complete todos los campos.\");\r\n        }\r\n    }\r\n\r\n    private void mostrarMiniaturasCrearEditar() {\r\n        if (layoutFotosSeleccionadasCrearEditar != null) {\r\n            layoutFotosSeleccionadasCrearEditar.removeAllViews();\r\n            for (String path : selectedImagePaths) {\r\n                mostrarMiniaturaEnLayout(layoutFotosSeleccionadasCrearEditar, path);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void mostrarMiniaturaEnLayout(LinearLayout layout, String path) {\r\n        ImageView imageView = new ImageView(this);\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(100, 100);\r\n        params.setMargins(0, 0, 8, 0);\r\n        imageView.setLayoutParams(params);\r\n        Bitmap bitmap = BitmapFactory.decodeFile(path);\r\n        imageView.setImageBitmap(bitmap);\r\n        layout.addView(imageView);\r\n    }\r\n\r\n    private void checkPermissionsAndOpenGallery() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)\r\n                    != PackageManager.PERMISSION_GRANTED) {\r\n                ActivityCompat.requestPermissions(this,\r\n                        new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},\r\n                        REQUEST_READ_EXTERNAL_STORAGE);\r\n                return;\r\n            }\r\n        }\r\n        openGallery();\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull\r\n    int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == REQUEST_READ_EXTERNAL_STORAGE) {\r\n            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                openGallery();\r\n            } else {\r\n                mostrarMsg(\"Permiso de lectura de almacenamiento necesario.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void openGallery() {\r\n        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\r\n        intent.setType(\"image/*\");\r\n        intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);\r\n        imagePickerLauncher.launch(intent);\r\n    }\r\n\r\n    private String getPathFromUri(Uri uri) {\r\n        String filePath = null;\r\n        String[] projection = {MediaStore.Images.Media.DATA};\r\n        Cursor cursor = getContentResolver().query(uri, projection, null, null, null);\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            int columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);\r\n            filePath = cursor.getString(columnIndex);\r\n            cursor.close();\r\n        }\r\n        return filePath;\r\n    }\r\n\r\n    private void obtenerDatosBebidaLocal() {\r\n        try {\r\n            cBebidas = db.lista_bebidas();\r\n            alBebidas.clear();\r\n            if (cBebidas != null && cBebidas.moveToFirst()) {\r\n                do {\r\n                    String idBebida = cBebidas.getString(cBebidas.getColumnIndexOrThrow(\"idBebida\"));\r\n                    String codigo = cBebidas.getString(cBebidas.getColumnIndexOrThrow(\"codigo\"));\r\n                    String descripcion = cBebidas.getString(cBebidas.getColumnIndexOrThrow(\"descripcion\"));\r\n                    String marca = cBebidas.getString(cBebidas.getColumnIndexOrThrow(\"marca\"));\r\n                    String presentacion = cBebidas.getString(cBebidas.getColumnIndexOrThrow(\"presentacion\"));\r\n                    String precio = String.valueOf(cBebidas.getDouble(cBebidas.getColumnIndexOrThrow(\"precio\")));\r\n                    String fotosCadena = cBebidas.getString(cBebidas.getColumnIndexOrThrow(\"urlFotos\"));\r\n                    ArrayList<String> listaFotos = new ArrayList<>(Arrays.asList(fotosCadena.split(\";\")));\r\n                    if (fotosCadena.isEmpty()) listaFotos.clear(); // Evitar lista con un solo string vacío\r\n\r\n                    misBebidas = new Bebidas(idBebida, codigo, descripcion, marca, presentacion, precio, listaFotos);\r\n                    alBebidas.add(misBebidas);\r\n                } while (cBebidas.moveToNext());\r\n            } else {\r\n                mostrarMsg(\"No hay bebidas registradas localmente. Puede agregar una.\");\r\n            }\r\n            if (cBebidas != null) {\r\n                cBebidas.close();\r\n            }\r\n            alBebidasCopia.clear();\r\n            alBebidasCopia.addAll(alBebidas);\r\n            ltsBebidas.setAdapter(new AdaptadorBebidas(this, alBebidas));\r\n            registerForContextMenu(ltsBebidas);\r\n        } catch (Exception e) {\r\n            mostrarMsg(\"Error al obtener datos locales: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void mostrarDatosBebida(boolean online) {\r\n        try {\r\n            alBebidas.clear();\r\n            if (online && jsonArray != null) {\r\n                for (int i = 0; i < jsonArray.length(); i++) {\r\n                    JSONObject bebidaObject = jsonArray.getJSONObject(i).getJSONObject(\"value\");\r\n                    String idBebida = bebidaObject.getString(\"idBebida\");\r\n                    String codigo = bebidaObject.getString(\"codigo\");\r\n                    String descripcion = bebidaObject.getString(\"descripcion\");\r\n                    String marca = bebidaObject.getString(\"marca\");\r\n                    String presentacion = bebidaObject.getString(\"presentacion\");\r\n                    String precio = String.valueOf(bebidaObject.getDouble(\"precio\"));\r\n                    JSONArray fotosJsonArray = bebidaObject.optJSONArray(\"fotos\");\r\n                    ArrayList<String> listaFotos = new ArrayList<>();\r\n                    if (fotosJsonArray != null) {\r\n                        for (int j = 0; j < fotosJsonArray.length(); j++) {\r\n                            listaFotos.add(fotosJsonArray.getString(j));\r\n                        }\r\n                    }\r\n                    misBebidas = new Bebidas(idBebida, codigo, descripcion, marca, presentacion, precio, listaFotos);\r\n                    alBebidas.add(misBebidas);\r\n                }\r\n            } else if (!online) {\r\n                // Los datos offline ya se cargaron en obtenerDatosBebidaLocal\r\n            }\r\n\r\n            alBebidasCopia.clear();\r\n            alBebidasCopia.addAll(alBebidas);\r\n            ltsBebidas.setAdapter(new AdaptadorBebidas(this, alBebidas));\r\n            registerForContextMenu(ltsBebidas);\r\n\r\n        } catch (Exception e) {\r\n            mostrarMsg(\"Error al mostrar datos de bebida: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private void buscarBebida() {\r\n        txtBuscarBebidas.addTextChangedListener(new TextWatcher() {\r\n            @Override\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            @Override\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                alBebidas.clear();\r\n                String buscar = s.toString().trim().toLowerCase();\r\n                if (buscar.isEmpty()) {\r\n                    alBebidas.addAll(alBebidasCopia);\r\n                } else {\r\n                    for (Bebidas item : alBebidasCopia) {\r\n                        if (item.getCodigo().toLowerCase().contains(buscar) ||\r\n                                item.getDescripcion().toLowerCase().contains(buscar) ||\r\n                                item.getMarca().toLowerCase().contains(buscar) ||\r\n                                item.getPresentacion().toLowerCase().contains(buscar)) {\r\n                            alBebidas.add(item);\r\n                        }\r\n                    }\r\n                }\r\n                ltsBebidas.setAdapter(new AdaptadorBebidas(getApplicationContext(), alBebidas));\r\n            }\r\n\r\n            @Override\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private String presentacion() {\r\n        return (etPresentacionCrearEditar != null) ? etPresentacionCrearEditar.getText().toString().trim() : \"\";\r\n    }\r\n\r\n    private String precio() {\r\n        return (etPrecioCrearEditar != null) ? etPrecioCrearEditar.getText().toString().trim() : \"\";\r\n    }\r\n\r\n    private void mostrarMsg(String msg) {\r\n        Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_LONG).show();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/miprimeraaplicacion/lista_bebidas.java b/app/src/main/java/com/example/miprimeraaplicacion/lista_bebidas.java
--- a/app/src/main/java/com/example/miprimeraaplicacion/lista_bebidas.java	(revision 6bd06fedf80796c3e2c3d131640caf17f9d1b7a9)
+++ b/app/src/main/java/com/example/miprimeraaplicacion/lista_bebidas.java	(date 1744592957895)
@@ -58,8 +58,6 @@
     detectarInternet di;
     int posicion = 0;
     EditText txtBuscarBebidas;
-
-    // Elementos de la interfaz para crear/editar
     EditText etCodigoCrearEditar;
     EditText etDescripcionCrearEditar;
     EditText etMarcaCrearEditar;
